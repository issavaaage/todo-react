{"version":3,"sources":["components/TaskFiled.jsx","App.js","index.js","components/ListItem.jsx"],"names":["TaskFiled","onAddTask","React","useState","text","setText","addTask","className","value","onChange","event","currentTarget","onKeyUp","keyCode","type","placeholder","onClick","width","height","viewBox","fill","xmlns","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","App","completed","tasks","setTasks","onToggleCompleted","index","prevTasks","map","task","curId","onRemoveTask","filter","_","ListItem","key","ReactDOM","render","StrictMode","document","getElementById","global","confirm"],"mappings":"qNAqCeA,MAnCf,YAAiC,IAAbC,EAAY,EAAZA,UAAY,EAEJC,IAAMC,SAAS,IAFX,mBAErBC,EAFqB,KAEfC,EAFe,KAStBC,EAAU,WACTF,IACCH,EAAUG,GACVC,EAAQ,MAUhB,OACI,yBAAKE,UAAU,mBACX,2BAAOC,MAAOJ,EAAMK,SApBF,SAACC,GACvB,IAAMF,EAAQE,EAAMC,cAAcH,MAClCH,EAAQG,IAkB6CI,QARrC,SAAAF,GACK,KAAlBA,EAAMG,SACLP,KAMuEQ,KAAK,OAAOC,YAAY,sHAC/F,4BAAQC,QAASV,EAASC,UAAU,0BAChC,yBAAKU,MAAM,KAAKC,OAAO,KAAKC,QAAQ,YAAYC,KAAK,OAAOC,MAAM,8BAC9D,0BAAMC,EAAE,UAAUC,OAAO,UAAUC,YAAY,IAAIC,cAAc,QAAQC,eAAe,UACxF,0BAAMJ,EAAE,UAAUC,OAAO,UAAUC,YAAY,IAAIC,cAAc,QAAQC,eAAe,cCgD7FC,MA1Ef,WAAgB,IAAD,EAEazB,IAAMC,SAAS,CACvC,CACEC,KAAM,qDACNwB,WAAW,GAEb,CACExB,KAAM,+FACNwB,WAAW,KATF,mBAENC,EAFM,KAECC,EAFD,KAaPC,EAAoB,SAACC,GACzBF,GAAS,SAAAG,GACP,OAAOA,EAAUC,KAAI,SAACC,EAAMC,GAC1B,OAAIJ,IAAUI,EACL,2BACFD,GADL,IAEEP,WAAYO,EAAKP,YAGdO,SAKPE,EAAe,SAACL,GACpBF,GAAS,SAAAG,GACP,OAAOA,EAAUK,QAAO,SAACC,EAAGH,GAC1B,OAAIJ,IAAUI,SAoBpB,OACE,yBAAK7B,UAAU,QACX,yBAAKA,UAAU,gBACX,oGAEJ,kBAAC,EAAD,CAAWN,UAjBC,SAACG,GACjB0B,GAAS,SAAAG,GACP,MAAM,GAAN,mBACKA,GADL,CAEE,CACE7B,OACAwB,WAAW,WAYb,yBAAKrB,UAAU,cAETsB,EAAMK,KAAI,SAACC,EAAMH,GAAP,OACR,kBAACQ,EAAA,EAAD,CACIC,IAAKT,EACLA,MAAOA,EACP5B,KAAM+B,EAAK/B,KACXwB,UAAWO,EAAKP,UAChBG,kBAAmBA,EACnBM,aAAcA,U,MChElCK,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U,gCCT1B,gCAgCeN,IA9Bf,YAA8E,IAA3DpC,EAA0D,EAA1DA,KAAMwB,EAAoD,EAApDA,UAAWI,EAAyC,EAAzCA,MAAOD,EAAkC,EAAlCA,kBAAmBM,EAAe,EAAfA,aAY1D,OACI,yBAAK9B,UAAS,0BAAqBqB,EAAY,6BAA+B,KAC1E,yBAAKZ,QAZW,WACpBe,EAAkBC,IAWiBzB,UAAU,yBACrC,yBAAKU,MAAM,KAAKC,OAAO,IAAIC,QAAQ,WAAWC,KAAK,OAAOC,MAAM,8BAC5D,0BAAMC,EAAE,mDAAmDC,OAAO,QAAQC,YAAY,MAAMC,cAAc,QAAQC,eAAe,YAGzI,2BAAItB,GACJ,yBAAKY,QAdM,WACZ+B,EAAOC,QAAQ,0KACdX,EAAaL,IAYazB,UAAU,0BAChC,yBAAKU,MAAM,KAAKC,OAAO,KAAKC,QAAQ,YAAYC,KAAK,OAAOC,MAAM,8BAC9D,0BAAMC,EAAE,UAAUC,OAAO,UAAUC,YAAY,IAAIC,cAAc,QAAQC,eAAe,UACxF,0BAAMJ,EAAE,UAAUC,OAAO,UAAUC,YAAY,IAAIC,cAAc,QAAQC,eAAe,gB","file":"static/js/main.6cd48ee3.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction TaskFiled({onAddTask}) {\r\n\r\n    const [text, setText] = React.useState('');\r\n\r\n    const handleInputChange = (event) => {\r\n        const value = event.currentTarget.value;\r\n        setText(value);\r\n    }\r\n\r\n    const addTask = () => {\r\n        if(text) {\r\n            onAddTask(text);\r\n            setText('');\r\n        }\r\n    }\r\n\r\n    const handleKeyUp = event => {\r\n        if(event.keyCode === 13) {\r\n            addTask()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"todo__add-field\">\r\n            <input value={text} onChange={handleInputChange} onKeyUp={handleKeyUp} type=\"text\" placeholder=\"Введите текст задачи...\"/>\r\n            <button onClick={addTask} className=\"todo__add-field-button\">\r\n                <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <path d=\"M8 1V15\" stroke=\"#C7C7C7\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n                    <path d=\"M1 8H15\" stroke=\"#C7C7C7\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n                </svg>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TaskFiled\r\n","import React from 'react';\n\nimport {ListItem, TaskField} from './components';\n\nfunction App() {\n\n  const [tasks, setTasks] = React.useState([\n    {\n      text: \"Изучить ReactJS\",\n      completed: true\n    },\n    {\n      text: \"Разработать TODO на ReactJS\",\n      completed: false\n    }\n  ])\n\n  const onToggleCompleted = (index)=> {\n    setTasks(prevTasks => {\n      return prevTasks.map((task, curId) => {\n        if (index === curId) {\n          return {\n            ...task,\n            completed: !task.completed\n          };\n        };\n        return task;\n      });\n    })\n  };\n\n  const onRemoveTask = (index) => {\n    setTasks(prevTasks => {\n      return prevTasks.filter((_, curId) => {\n        if (index !== curId) {\n          return true;\n        }\n        return false;\n      })\n    });\n  };\n\n  const onAddTask = (text) => {\n    setTasks(prevTasks => {\n      return [\n        ...prevTasks,\n        {\n          text,\n          completed: false\n        }\n      ]\n    })\n  }\n\n  return (\n    <div className=\"todo\">\n        <div className=\"todo__header\">\n            <h4>Список задач</h4>\n        </div>\n        <TaskField onAddTask={onAddTask} />\n        <div className=\"todo__list\">\n            {\n              tasks.map((task, index) => (\n                <ListItem \n                    key={index}\n                    index={index}\n                    text={task.text} \n                    completed={task.completed} \n                    onToggleCompleted={onToggleCompleted}\n                    onRemoveTask={onRemoveTask}\n                />\n              ))\n            }\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './scss/app.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import React from 'react'\r\n\r\nfunction ListItem({text, completed, index, onToggleCompleted, onRemoveTask}) {\r\n\r\n    const toggleCompleted = () => {\r\n        onToggleCompleted(index);\r\n    };\r\n\r\n    const removeTask = () => {\r\n        if(global.confirm(\"Действительно удалить заметку?\")) {\r\n            onRemoveTask(index);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={`todo__list-item ${completed ? 'todo__list-item--completed' : ''}`}>\r\n            <div onClick={toggleCompleted} className=\"todo__list-item-check\">\r\n                <svg width=\"11\" height=\"8\" viewBox=\"0 0 11 8\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <path d=\"M9.29999 1.20001L3.79999 6.70001L1.29999 4.20001\" stroke=\"white\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n                </svg>\r\n            </div>\r\n            <p>{text}</p>\r\n            <div onClick={removeTask} className=\"todo__list-item-remove\">\r\n                <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <path d=\"M8 1V15\" stroke=\"#C7C7C7\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n                    <path d=\"M1 8H15\" stroke=\"#C7C7C7\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n                </svg>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListItem\r\n\r\n"],"sourceRoot":""}